library(maps)
library(ggplot2)
library(fields)
library(leaflet)
library(MBA)
load('data_pm10.RData')
## plot monitoring stations
plot(META$Longitude,META$Latitude,pch=19,cex=0.9,xlab='Longitude',ylab='Latitude')
map("world",add=T)
base.map <- leaflet(width = "100%") %>%
addProviderTiles("Stamen.Terrain", group = "Terrain") %>%
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>%
addLayersControl(baseGroup = c("Terrain", "Satellite"), options = layersControlOptions(collapsed = FALSE))
#This code below produces a clickable dynamic map.
base.map %>%
addCircleMarkers(lng = META$Longitude, lat = META$Latitude,
stroke = FALSE, radius = 5, fillOpacity = 0.9)
## plot PM10 concentrations at some days
k = 61 #2018-03-02
k = 62 #"2018-03-03
k = 100 #2018-04-10
k = 116 #2018-04-26
example = as.data.frame(cbind(PM10 = PM10[k,] ,
Longitude = META$Longitude,
Latitude = META$Latitude,
country = as.numeric(as.factor(META$Countrycode))))
# EU Contries
some.eu.countries <- c(
"Portugal", "Spain", "France", "Switzerland", "Germany",
"Austria", "Belgium",  "Netherlands",
"Denmark",  "Italy")
some.eu.maps <- map_data("world", region = some.eu.countries)
ex = ggplot(aes(x = long, y = lat, group = group),data = some.eu.maps) +
geom_polygon(fill="white", colour = "lightgray")+
labs(x = "Longitude",y="Latitude")+
geom_point(aes(x=Longitude, y=Latitude, color=PM10,group = country),data=example)+
scale_color_gradientn(colours = tim.colors(5),limits=c(0,104),na.value ="white")+
ggtitle(rownames(PM10)[k])+
theme_bw()
ex
## example surface plot
k = 62 #"2018-03-03
example = as.data.frame(cbind(PM10 = PM10[k,] ,
Longitude = META$Longitude,
Latitude = META$Latitude,
country = as.numeric(as.factor(META$Countrycode))))
example2 = example[complete.cases(example),] #remove missing values
ex.surf=mba.surf(cbind(example2$Longitude,example2$Latitude,example2$PM10),
no.X = 300, no.Y = 300,
extend = TRUE, sp = TRUE)$xyz.est
par(mar=c(1,1,1,1))
image.plot(ex.surf,zlim=range(ex.surf@data),horizontal = F)
map('world',add=T)
## plot the time series of PM10 concentration observed in Denmark
matplot(PM10[,META$Countrycode=='DK'],type='l',lty=1,
ylab=expression(PM[10]),main='Denmark',axes=F)
axis(2)
axis(1,at=seq(1,365,l=30),lab=rownames(PM10)[seq(1,365,l=30)],
las=2,cex.axis=0.7)
## plot the average PM10 concentration in Italy
plot(rowMeans(PM10[,META$Countrycode=='IT'],na.rm=T),type='l',lty=1,xlab='',
ylab=expression(paste('average ', PM[10])),main='Italy',axes=F)
axis(2)
axis(1,at=seq(1,365,l=30),lab=rownames(PM10)[seq(1,365,l=30)],
las=2,cex.axis=0.7)
box()
## histogram
par(mfrow=c(1,2),mar=c(3,2,1,1),mgp=c(2,1,0),cex.axis=0.8)
hist(c(PM10),xlab = expression(PM[10]),main="",ylab='',
freq=T,breaks=30)
box()
hist(c(log(PM10)),xlab = expression(log(PM[10])),
main='',ylab='',freq=T,breaks=30)
box()
## if you employ a logaritmic transformation, you could replace PM10 = 0 with PM10 = 1,
## if you employ a logaritmic transformation, you could replace PM10 = 0 with PM10 = 1,
# to avoid numerical issues
## if you employ a logaritmic transformation, you could replace PM10 = 0 with PM10 = 1,
# to avoid numerical issues
## if you employ a logaritmic transformation, you could replace PM10 = 0 with PM10 = 1,
# to avoid numerical issues
load('data_pm10.RData')
View(PM10)
View(META)
library(sf)
install.packages("sf")
library(sf)
nuts3 <- read_sf("data/NUTS_RG_60M_2016_4326_LEVL_3.geojson")
plot(nuts3)
library(ggplot2)
nuts3
ggplot(nuts3) +
geom_sf()
ggplot(nuts3) +
geom_sf() +
lim(37, 60)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-7, 20)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-5, 20)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-10, 20)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-10, 20) +
coord_equal()
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
pop_density <- read.csv("data/demo_r_d3dens_1_Data.csv")
head(pop_density)
head(nuts3)
read.table("data/demo_r_d3dens+ESTAT.tsv")
pop_density <- read.csv("~/Google Drive PhD/RG/spatiotemporal/R/data/demo_r_d3dens+ESTAT.tsv")
View(pop_density)
pop_density <- read.csv("~/Google Drive PhD/RG/spatiotemporal/R/data/demo_r_d3dens+ESTAT.tsv")
View(pop_density)
read.csv("data/demo_r_d3dens+ESTAT.tsv", sep = ",")
install.packages("eurostat")
library(eurostat)
library(rvest)
# Get Eurostat data listing
toc <- get_eurostat_toc()
toc
toc$title
toc
toc$title
toc$title[2]
toc
search_eurostat("d3dens",
type = "table")
search_eurostat("Population density",
type = "table")
search_eurostat("NUTS 3",
type = "table")
search_eurostat("NUTS 3")
search_eurostat("NUTS 3")[6]
search_eurostat("NUTS 3")[6,]
search_eurostat("NUTS 3")[6,]$code
dat <- get_eurostat('demo_r_d3dens', time_format = "num")
dat
dat <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geo=c("NUTS 3")))
dat <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geo=c("NUTS3")))
dat <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geo=c("nuts3")))
dat <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geoLevel=c("nuts3")))
dat
dat <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geoLevel="nuts3", time="2018"))
dat
dat %>%
select(geo, 'density'=values)
library(dplyr)
dat <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geoLevel="nuts3", time="2018"))
dat %>%
select(geo, 'density'=values)
dat <- dat %>%
select(geo, 'density'=values)
nuts3 <- nuts3 %>%
left_join(dat)
nuts3
dat <- dat %>%
select(id=geo, 'density'=values)
dat <- dat %>%
select('id'=geo, 'density'=values)
dat <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geoLevel="nuts3", time="2018"))
dat <- dat %>%
select('id'=geo, 'density'=values)
nuts3 <- nuts3 %>%
left_join(dat)
ggplot(nuts3) +
geom_sf(aes(fill=density)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
View(nuts3)
ggplot(nuts3) +
geom_sf(aes(fill=density, color=density)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
nuts3 <- read_sf("data/NUTS_RG_60M_2016_4326_LEVL_3.geojson")
nuts3 <- nuts3 %>%
select(id, NUTS_NAME, geometry)
nuts3 <- nuts3 %>%
select(id, NUTS_NAME, geometry)
plot(nuts3)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
# Useful covariates from EUROSTAT
library(sf)
library(ggplot2)
library(dplyr)
library(eurostat)
library(rvest)
nuts3 <- read_sf("data/NUTS_RG_60M_2016_4326_LEVL_3.geojson")
nuts3 <- nuts3 %>%
select(id, NUTS_NAME, geometry)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
pop_density <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geoLevel="nuts3", time="2018")) %>%
select('id'=geo, 'pop_density'=values)
nuts3 <- nuts3 %>%
left_join(pop_density)
ggplot(nuts3) +
geom_sf(aes(fill=pop_density, color=density)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
ggplot(nuts3) +
geom_sf(aes(fill=pop_density, color=pop_density)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
gdp <- get_eurostat('nama_10r_3gdp', time_format = "num", filters = list(geoLevel="nuts3", time="2018")) %>%
select('id'=geo, 'gdp'=values)
gdp
get_eurostat('nama_10r_3gdp', time_format = "num", filters = list(geoLevel="nuts3", time="2018"))
gdp <- get_eurostat('nama_10r_3gdp', time_format = "num", filters = list(geoLevel="nuts3", time="2017")) %>%
select('id'=geo, 'gdp'=values)
nuts3 <- nuts3 %>%
left_join(gdp)
ggplot(nuts3) +
geom_sf(aes(fill=gdp, color=gdp)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
gdp
nuts3 <- read_sf("data/NUTS_RG_60M_2016_4326_LEVL_3.geojson")
library(maps)
library(ggplot2)
library(fields)
library(leaflet)
library(MBA)
load('data_pm10.RData')
## plot monitoring stations
plot(META$Longitude,META$Latitude,pch=19,cex=0.9,xlab='Longitude',ylab='Latitude')
map("world",add=T)
## plot stations on the map
#Set up a leaflet basemap to help visualize the data.
#Leaflet is one of the most popular open-source JavaScript libraries for interactive maps.
#We use  the pipe operator %>% to reduce clutter.
base.map <- leaflet(width = "100%") %>%
addProviderTiles("Stamen.Terrain", group = "Terrain") %>%
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>%
addLayersControl(baseGroup = c("Terrain", "Satellite"), options = layersControlOptions(collapsed = FALSE))
#This code below produces a clickable dynamic map.
base.map %>%
addCircleMarkers(lng = META$Longitude, lat = META$Latitude,
stroke = FALSE, radius = 5, fillOpacity = 0.9)
source('~/Google Drive PhD/RG/spatiotemporal/R/covariates.R')
nuts3 <- read_sf("data/NUTS_RG_60M_2016_4326_LEVL_3.geojson")
countries <- c("PT", "ES", "FR", "CH", "DE", "AT", "BE", "NL", "DK", "IT")
nuts3 <- nuts3 %>%
filter(CNTR_CODE %in% countries) %>%
select(id, NUTS_NAME, geometry)
# Useful covariates from EUROSTAT
library(sf)
library(ggplot2)
library(dplyr)
library(eurostat)
library(rvest)
nuts3 <- read_sf("data/NUTS_RG_60M_2016_4326_LEVL_3.geojson")
countries <- c("PT", "ES", "FR", "CH", "DE", "AT", "BE", "NL", "DK", "IT")
nuts3 <- nuts3 %>%
filter(CNTR_CODE %in% countries) %>%
select(id, NUTS_NAME, geometry)
ggplot(nuts3) +
geom_sf() +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
pop_density <- get_eurostat('demo_r_d3dens', time_format = "num", filters = list(geoLevel="nuts3", time="2018")) %>%
select('id'=geo, 'pop_density'=values)
nuts3 <- nuts3 %>%
left_join(pop_density)
ggplot(nuts3) +
geom_sf(aes(fill=pop_density, color=pop_density)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
gdp <- get_eurostat('nama_10r_3gdp', time_format = "num", filters = list(geoLevel="nuts3", time="2017")) %>%
select('id'=geo, 'gdp'=values)
nuts3 <- nuts3 %>%
left_join(gdp)
ggplot(nuts3) +
geom_sf(aes(fill=gdp, color=gdp)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
gdp <- get_eurostat('nama_10r_3gdp', time_format = "num", filters = list(geoLevel="nuts3", time="2016")) %>%
select('id'=geo, 'gdp'=values)
nuts3 <- nuts3 %>%
left_join(gdp)
ggplot(nuts3) +
geom_sf(aes(fill=gdp, color=gdp)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
gdp <- get_eurostat('BD_HGNACE2_R3__custom_268003', time_format = "num", filters = list(geoLevel="nuts3", time="2016")) %>%
select('id'=geo, 'gdp'=values)
gdp
gdp <- get_eurostat('BD_HGNACE2_R3__custom_268003', time_format = "num", filters = list(geoLevel="nuts3", time="2017")) %>%
select('id'=geo, 'gdp'=values)
gdp <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2017")) %>%
select('id'=geo, 'gdp'=values)
nuts3 <- nuts3 %>%
left_join(gdp)
gdp
gdp <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2017")) %>%
select('id'=geo, 'gdp'=values)
nuts3 <- nuts3 %>%
left_join(gdp)
ggplot(nuts3) +
geom_sf(aes(fill=gdp, color=gdp)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
gdp
gdp <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2017")) %>%
select('id'=geo, 'gdp'=values)
gdp <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2018")) %>%
select('id'=geo, 'gdp'=values)
get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2018"))
gdp <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2018")) %>%
select('id'=geo, 'cdd'=values)
nuts3 <- nuts3 %>%
left_join(gdp)
ggplot(nuts3) +
geom_sf(aes(fill=gdp, color=gdp)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
nama_10r_3gdp
View(gdp)
View(gdp)
cdd <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2018")) %>%
select('id'=geo, 'cdd'=values)
nuts3 <- nuts3 %>%
left_join(cdd)
ggplot(nuts3) +
geom_sf(aes(fill=cdd, color=cdd)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf()
cdd <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2018")) %>%
select('id'=geo, 'cdd'=values)
nuts3 <- nuts3 %>%
left_join(cdd)
ggplot(nuts3) +
geom_sf(aes(fill=cdd, color=cdd)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf() +
ggtitle("Heating degree days")
hdd <- get_eurostat('nrg_chddr2_a', time_format = "num", filters = list(geoLevel="nuts3", time="2018", indic_nrg="HDD")) %>%
select('id'=geo, 'hdd'=values)
nuts3 <- nuts3 %>%
left_join(hdd)
ggplot(nuts3) +
geom_sf(aes(fill=cdd, color=hdd)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf() +
ggtitle("Heating degree days")
ggplot(nuts3) +
geom_sf(aes(fill=hdd, color=hdd)) +
ylim(37, 60) +
xlim(-10, 20) +
coord_sf() +
ggtitle("Heating degree days")
hdd <- get_eurostat('nrg_chddr2_m', time_format = "num", filters = list(geoLevel="nuts3", time=c("2018M01", "2018M02"), indic_nrg="HDD")) %>%
select('id'=geo, 'hdd'=values)
get_eurostat('nrg_chddr2_m', time_format = "num", filters = list(geoLevel="nuts3", time=c("2018M01", "2018M02"), indic_nrg="HDD"))
get_eurostat('nrg_chddr2_m', filters = list(geoLevel="nuts3", time=c("2018M01", "2018M02"), indic_nrg="HDD"))
